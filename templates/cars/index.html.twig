{% extends 'base.html.twig' %}

{% block title %}All cars{% endblock %}

{% block body %}

{% include "navbar.html.twig" %}

<div class="all-cars">
	<div class="row">
		
		<div class="col-lg-3 col-md-12">
			<form id="filter-form">
				<div class="filter">
					<div class="filter-title">Type</div>
					<ul class="type">
						{% for car in carDataType %}
								<li>
										<input type="checkbox" class="form-check-input" id="{{ car.type|lower }}">
										<label for="{{ car.type|lower }}">
												{{ car.type }}
												<span>({{ car.car_count }})</span>
										</label>
								</li>
						{% endfor %}
					</ul>

					<div class="filter-title">Capacity</div>
					<ul class="capacity">
						{% for car in carDataCapacity %}
							<li><input type="checkbox" class="form-check-input" id="person{{car.capacity}}" value="{{car.capacity}}">
								<label for="person{{car.capacity}}">{{car.capacity}} Person
									<span>({{car.car_count}})</span>
								</label>
							</li>
						{% endfor %}
					</ul>

					
					<div class="d-flex justify-content-between align-items-center mb-3">
						<div class="filter-title">Price</div>
						<span id="value"></span>
					</div>
					<input type="range" id="price-filter" step="1" value="{{max}}" max="{{max}}">
					<p>Max. ${{max}}</p>
					<button id="clear-filters">Clear filters</button>
				</div>
			</form>
		</div>

		<div class="col-lg-9 col-md-12">
			<div class="cars">
				<div class="row">
					{% include 'cars/_list.html.twig' with {'cars': cars} %}
				</div>
			</div>

		</div>
	</div>
</div>


{% include "footer.html.twig" %}

<script>

let favoriteCar = document.querySelectorAll(".cars .car .favorite i");
let maxValue = document.getElementById("value");
maxValue.innerText = "$" + document.getElementById("price-filter").value;

favoriteCar.forEach(function(car){
	car.addEventListener("click", function(){
		let carId = this.parentNode.nextElementSibling.value;
		if(this.classList.contains("active")){
			this.classList.add("fi-rr-heart");
			this.classList.remove("fi-ss-heart");
			this.classList.remove("active");
			fetch("/favorite", {
						method: "DELETE",
						headers: {
								"Content-Type": "application/json",
						},
						body:JSON.stringify({id : carId})
			})
			.then((response) => {
					if (!response.ok) {
							throw new Error("Network response was not ok");
					}
					return response.text();
			});	
		}
		else{
			this.classList.remove("fi-rr-heart");
			this.classList.add("fi-ss-heart");
			this.classList.add("active");
			fetch("/favorite", {
					method: "POST",
					headers: {
							"Content-Type": "application/json",
					},
					body:JSON.stringify({id : carId})
			})
			.then((response) => {
					if (!response.ok) {
							throw new Error("Network response was not ok");
					}
					return response.text();
			});
		}
	});
});

document.getElementById("price-filter").addEventListener("input", function(){
	maxValue.innerText = "$" + this.value;
});

document.addEventListener("DOMContentLoaded", function () {
    const filterForm = document.querySelector("#filter-form");
    const carListContainer = document.querySelector(".cars .row");
    const clearFiltersButton = document.getElementById("clear-filters");

    function fetchCars(filters = {}) {
        fetch("/cars/filter", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(filters),
        })
        .then((response) => {
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }
            return response.text();
        })
        .then((html) => {
            carListContainer.innerHTML = html;

            let favoriteCar = document.querySelectorAll(".cars .car .favorite i");
            favoriteCar.forEach(function(car){
                car.addEventListener("click", function(){
                    let carId = this.parentNode.nextElementSibling.value;
                    if(this.classList.contains("active")){
                        this.classList.add("fi-rr-heart");
                        this.classList.remove("fi-ss-heart");
                        this.classList.remove("active");
												fetch("/favorite", {
													method: "DELETE",
													headers: {
															"Content-Type": "application/json",
													},
													body: JSON.stringify({ id: carId })
												})
												.then((response) => {
														if (!response.ok) {
																throw new Error("Network response was not ok");
														}
														return response.text();
												});
										}
                    else{
                        this.classList.remove("fi-rr-heart");
                        this.classList.add("fi-ss-heart");
                        this.classList.add("active");
												fetch("/favorite", {
													method: "POST",
													headers: {
															"Content-Type": "application/json",
													},
													body: JSON.stringify({ id: carId })
												})
												.then((response) => {
														if (!response.ok) {
																throw new Error("Network response was not ok");
														}
														return response.text();
												});
                    }
                });
            });
        })
        .catch((error) => {
            console.error("There was a problem with the fetch operation:", error);
        });
    }

    filterForm.addEventListener("change", function () {
        const filters = {};

				const typeFilters = [...document.querySelectorAll(".filter .type input[type=checkbox]")].map(item => item.id)
        typeFilters.forEach(function (type) {
            const checkbox = document.getElementById(type);
            if (checkbox.checked) {
                if (!filters.type) filters.type = [];
                filters.type.push(type);
            }
        });

        const capacityFilters = [...document.querySelectorAll(".filter .capacity input[type=checkbox]")].map(item => item.id);
        capacityFilters.forEach(function (capacity) {
            const checkbox = document.getElementById(capacity);
            if (checkbox.checked) {
                if (!filters.capacity) filters.capacity = [];
                filters.capacity.push(checkbox.value);
            }
        });

        const priceRange = document.querySelector('input[type="range"]');
        if (priceRange) {
            filters.price_min = 0;
            filters.price_max = priceRange.value;
        }

        fetchCars(filters);
    });

    clearFiltersButton.addEventListener("click", function (e) {
				e.preventDefault();
        filterForm.reset();
				maxValue.innerText = "$" + document.getElementById("price-filter").value;
        fetchCars();
    });

});

</script>
{% endblock %}
